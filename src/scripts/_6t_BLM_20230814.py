# -*- coding: utf-8 -*-
"""
Generated by ArcGIS ModelBuilder on : 2023-09-08 15:33:47
"""
import arcpy
from PC414CWIMillionAcres.AddFields2 import AddFields2
from PC414CWIMillionAcres.AssignDomains import AssignDomains
from PC414CWIMillionAcres.KeepFields import KeepFields
from PC414CWIMillionAcres.StandardizeDomains import StandardizeDomains
from PC414CWIMillionAcres.aEnrichmentsPolygon1 import aEnrichmentsPolygon1
from sys import argv

def zBLM(usfs_haz_fuels_treatments_standardized_20220713_2_="C:\\Users\\sageg\\Documents\\ArcGIS\\Projects\\PC414 CWI Million Acres\\PC414 CWI Million Acres.gdb\\c_Standardized\\nps_flat_fuels_standardized_20230814", BLM_enriched_20230814="C:\\Users\\sageg\\Documents\\ArcGIS\\Projects\\PC414 CWI Million Acres\\PC414 CWI Million Acres.gdb\\d_Enriched\\BLM_enriched_20230814", BLM_20230813="C:\\Users\\sageg\\Documents\\ArcGIS\\Projects\\PC414 CWI Million Acres\\PC414 CWI Million Acres.gdb\\a_Originals\\BLM_20230813", Output_Feature_Class="C:\\Users\\sageg\\Documents\\ArcGIS\\Projects\\PC414 CWI Million Acres\\scratch.gdb\\BLM_20230813_CopyFeatures"):  # 6t BLM 20230814

    # To allow overwriting outputs change overwriteOutput option to True.
    arcpy.env.overwriteOutput = False

    BLM_CA_Vegetation_Treatment_Area_Completed_Polygons = "Treatments-Source\\BLM CA Vegetation Treatment Area Completed Polygons"
    California_2_ = "C:\\Users\\sageg\\Documents\\ArcGIS\\Projects\\PC414 CWI Million Acres\\PC414 CWI Million Acres.gdb\\b_Reference\\California"

    # Process: Clip (Clip) (analysis)
    arcpy.analysis.Clip(in_features=BLM_CA_Vegetation_Treatment_Area_Completed_Polygons, clip_features=California_2_, out_feature_class=BLM_20230813.__str__().format(**locals(),**globals()))

    # Process: Repair Geometry (Repair Geometry) (management)
    Repaired_Input_Features = arcpy.management.RepairGeometry(in_features=BLM_20230813.__str__().format(**locals(),**globals()))[0]

    # Process: Copy Features (2) (Copy Features) (management)
    arcpy.management.CopyFeatures(in_features=Repaired_Input_Features, out_feature_class=Output_Feature_Class.__str__().format(**locals(),**globals()))

    # Process: 1b Add Fields (1b Add Fields) (PC414CWIMillionAcres)
    usfs_haz_fuels_treatments_standardized_20220713_8_ = AddFields2(Input_Table=Output_Feature_Class.__str__().format(**locals(),**globals()))[0]

    # Process: Calculate Project ID (Calculate Field) (management)
    Activity_SilvTSI_20220627_Se2_2_ = arcpy.management.CalculateField(in_table=usfs_haz_fuels_treatments_standardized_20220713_8_, field="PROJECTID_USER", expression="!UNIQUE_ID!")[0]

    # Process: Calculate Agency (Calculate Field) (management)
    Updated_Input_Table_30_ = arcpy.management.CalculateField(in_table=Activity_SilvTSI_20220627_Se2_2_, field="AGENCY", expression="\"DOI\"")[0]

    # Process: Calculate Data Steward (Calculate Field) (management)
    Updated_Input_Table = arcpy.management.CalculateField(in_table=Updated_Input_Table_30_, field="ORG_ADMIN_p", expression="'BLM'")[0]

    # Process: Calculate Data Steward (2) (Calculate Field) (management)
    Updated_Input_Table_15_ = arcpy.management.CalculateField(in_table=Updated_Input_Table, field="ORG_ADMIN_t", expression="'BLM'")[0]

    # Process: Calculate Data Steward (3) (Calculate Field) (management)
    Updated_Input_Table_16_ = arcpy.management.CalculateField(in_table=Updated_Input_Table_15_, field="ORG_ADMIN_a", expression="'BLM'")[0]

    # Process: Calculate Project Contact (Calculate Field) (management)
    Updated_Input_Table_3_ = arcpy.management.CalculateField(in_table=Updated_Input_Table_16_, field="PROJECT_CONTACT", expression="None")[0]

    # Process: Calculate Project Email (Calculate Field) (management)
    Updated_Input_Table_5_ = arcpy.management.CalculateField(in_table=Updated_Input_Table_3_, field="PROJECT_EMAIL", expression="None")[0]

    # Process: Calculate Admin Org (Calculate Field) (management)
    Updated_Input_Table_31_ = arcpy.management.CalculateField(in_table=Updated_Input_Table_5_, field="ADMINISTERING_ORG", expression="'BLM'")[0]

    # Process: Calculate Project Name (Calculate Field) (management)
    Updated_Input_Table_33_ = arcpy.management.CalculateField(in_table=Updated_Input_Table_31_, field="PROJECT_NAME", expression="!TRTMNT_NM!")[0]

    # Process: Calculate Fund Source (Calculate Field) (management)
    Updated_Input_Table_6_ = arcpy.management.CalculateField(in_table=Updated_Input_Table_33_, field="PRIMARY_FUNDING_SOURCE", expression="\"FEDERAL\"")[0]

    # Process: Calculate Fund Org (Calculate Field) (management)
    Updated_Input_Table_7_ = arcpy.management.CalculateField(in_table=Updated_Input_Table_6_, field="PRIMARY_FUNDING_ORG", expression="\"NPS\"")[0]

    # Process: Calculate Imp Org (Calculate Field) (management)
    Updated_Input_Table_32_ = arcpy.management.CalculateField(in_table=Updated_Input_Table_7_, field="IMPLEMENTING_ORG", expression="'BLM'")[0]

    # Process: Calculate Activity Name (Calculate Field) (management)
    Updated_Input_Table_14_ = arcpy.management.CalculateField(in_table=Updated_Input_Table_32_, field="ACTIVITY_NAME", expression="!TRTMNT_NM!")[0]

    # Process: Calculate Veg User Defined (Calculate Field) (management)
    Updated_Input_Table_9_ = arcpy.management.CalculateField(in_table=Updated_Input_Table_14_, field="BVT_USERD", expression="\"NO\"")[0]

    # Process: Calculate Activity Start (Calculate Field) (management)
    BLM_20230813_2_ = arcpy.management.CalculateField(in_table=Updated_Input_Table_9_, field="ACTIVITY_START", expression="!TRTMNT_START_DT!")[0]

    # Process: Calculate Activity End Date (Calculate Field) (management)
    Updated_Input_Table_2_ = arcpy.management.CalculateField(in_table=BLM_20230813_2_, field="ACTIVITY_END", expression="!TRTMNT_END_DT!")[0]

    # Process: Calculate Status (Calculate Field) (management)
    Updated_Input_Table_35_ = arcpy.management.CalculateField(in_table=Updated_Input_Table_2_, field="ACTIVITY_STATUS", expression="'COMPLETE'")[0]

    # Process: Calculate Activity Quantity (3) (Calculate Field) (management)
    Activity_SilvTSI_20220627_Se2_6_ = arcpy.management.CalculateField(in_table=Updated_Input_Table_35_, field="ACTIVITY_QUANTITY", expression="ifelse(!BLM_ACRES!, !GIS_ACRES!)", code_block="""def ifelse(BLM, GIS):
    if BLM == 0 or BLM is None:
        return GIS
    else:
        return BLM""", field_type="DOUBLE")[0]

    # Process: Calculate Activity UOM (3) (Calculate Field) (management)
    Activity_SilvTSI_20220627_Se2_5_ = arcpy.management.CalculateField(in_table=Activity_SilvTSI_20220627_Se2_6_, field="ACTIVITY_UOM", expression="\"AC\"")[0]

    # Process: Calculate Admin Org2 (Calculate Field) (management)
    Updated_Input_Table_10_ = arcpy.management.CalculateField(in_table=Activity_SilvTSI_20220627_Se2_5_, field="ADMIN_ORG_NAME", expression="\"BLM\"")[0]

    # Process: Calculate Implementation Org 2 (Calculate Field) (management)
    Updated_Input_Table_11_ = arcpy.management.CalculateField(in_table=Updated_Input_Table_10_, field="IMPLEM_ORG_NAME", expression="'BLM'")[0]

    # Process: Calculate Primary Fund Source (Calculate Field) (management)
    Updated_Input_Table_12_ = arcpy.management.CalculateField(in_table=Updated_Input_Table_11_, field="PRIMARY_FUND_SRC_NAME", expression="\"FEDERAL\"")[0]

    # Process: Calculate Fund Org 2 (Calculate Field) (management)
    Updated_Input_Table_13_ = arcpy.management.CalculateField(in_table=Updated_Input_Table_12_, field="PRIMARY_FUND_ORG_NAME", expression="\"BLM\"")[0]

    # Process: Calculate Source (Calculate Field) (management)
    Updated_Input_Table_36_ = arcpy.management.CalculateField(in_table=Updated_Input_Table_13_, field="Source", expression="'BLM'")[0]

    # Process: Calculate Year (Calculate Field) (management)
    Updated_Input_Table_37_ = arcpy.management.CalculateField(in_table=Updated_Input_Table_36_, field="Year", expression="Year($feature.TRTMNT_END_DT)", expression_type="ARCADE")[0]

    # Process: Calculate Treatment Name Lowercase (Calculate Field) (management)
    BLM_20230813_CopyFeatures = arcpy.management.CalculateField(in_table=Updated_Input_Table_37_, field="TRTMNT_NM", expression="!TRTMNT_NM!.lower()")[0]

    # Process: Calculate Treatment Comments Lowercase (Calculate Field) (management)
    BLM_20230813_CopyFeatures_2_ = arcpy.management.CalculateField(in_table=BLM_20230813_CopyFeatures, field="TRTMNT_COMMENTS", expression="!TRTMNT_COMMENTS!.lower()")[0]

    # Process: Calculate Crosswalk (Calculate Field) (management)
    Updated_Input_Table_39_ = arcpy.management.CalculateField(in_table=BLM_20230813_CopyFeatures_2_, field="Crosswalk", expression="ifelse(!TRTMNT_NM!,!TRTMNT_TYPE_CD!,!TRTMNT_SUBTYPE!,!TRTMNT_COMMENTS!,!Crosswalk!)", code_block="""def ifelse(Nm, type, sub, com, cross):
    if (type == 'BIOLOGICAL' or type == 1) and sub == 'CLASSICAL':
        return 'PRESCRB_HERBIVORY'
    if (type == 'BIOLOGICAL' or type == 1) and sub == 'NON-CLASSICAL':
        return 'PRESCRB_HERBIVORY'
    if sub == 'FERTILIZER':
        return 'NOT_DEFINED'
    if sub == 'PESTICIDE':
        return 'PEST_CNTRL'
    if type == 'PRESCRIBED FIRE' or type == 3:
        return 'BROADCAST_BURN'
    if (type == 'PHYSICAL' or type == 4) and sub == 'OTHER':
        return 'THIN_MECH'
    if (type == 'PHYSICAL' or type == 4) and sub == 'REMOVE':
        return 'THIN_MECH'
    if (type == 'PHYSICAL' or type == 4) and sub == 'PLANT':
        return 'HABITAT_REVEG'
    else:
        return cross""")[0]

    # Process: Calculate Crosswalk 2 (Calculate Field) (management)
    Updated_Input_Table_18_ = arcpy.management.CalculateField(in_table=Updated_Input_Table_39_, field="Crosswalk", expression="ifelse(!TRTMNT_NM!,!TRTMNT_TYPE_CD!,!TRTMNT_SUBTYPE!,!TRTMNT_COMMENTS!,!Crosswalk!)", code_block="""def ifelse(Nm, type, sub, com, cross):
    if Nm is None:
        return cross
    elif (type == 'PRESCRIBED FIRE' or type == 3) and 'pile' in Nm:
        return 'PILE_BURN'
    elif (type == 'PRESCRIBED FIRE' or type == 3) and 'hp' in Nm:
        return 'PILE_BURN'
    elif (type == 'PRESCRIBED FIRE' or type == 3) and 'hand' in Nm:
        return 'PILE_BURN'
    elif (type == 'PHYSICAL' or type == 4) and 'road' in Nm:
        return 'ROAD_CLEAR'
    elif (type == 'PHYSICAL' or type == 4) and 'chip' in Nm:
        return 'CHIPPING'
    elif (type == 'PHYSICAL' or type == 4) and 'hand' in Nm:
        return 'THIN_MAN'
    elif (type == 'PHYSICAL' or type == 4) and 'masticat' in Nm:
        return 'MASTICATION'
    else:
        return cross""")[0]

    # Process: Calculate Crosswalk 3 (Calculate Field) (management)
    Updated_Input_Table_19_ = arcpy.management.CalculateField(in_table=Updated_Input_Table_18_, field="Crosswalk", expression="ifelse(!TRTMNT_NM!,!TRTMNT_TYPE_CD!,!TRTMNT_SUBTYPE!,!TRTMNT_COMMENTS!,!Crosswalk!)", code_block="""def ifelse(Nm, type, sub, com, cross):
    if com is None:
        return cross
    elif (type == 'PRESCRIBED FIRE' or type == 3) and 'pile' in com:
        return 'PILE_BURN'
    elif (type == 'PRESCRIBED FIRE' or type == 3) and 'broadcast' in com:
        return 'BROADCAST_BURN'
    elif (type == 'PHYSICAL' or type == 4) and 'hand' in com:
        return 'THIN_MAN'
    elif (type == 'PHYSICAL' or type == 4) and 'chip' in com:
        return 'CHIPPING'
    elif (type == 'PHYSICAL' or type == 4) and 'lop' in com:
        return 'LOP_AND_SCAT'
    elif (type == 'PHYSICAL' or type == 4) and 'masticat' in com:
        return 'MASTICATION'
    elif (type == 'PHYSICAL' or type == 4) and 'mow' in com:
        return 'MOWING'
    elif (type == 'PHYSICAL' or type == 4) and 'biomass' in com:
        return 'BIOMASS_REMOVAL'
    elif (type == 'PHYSICAL' or type == 4) and 'machine pile' in com:
        return 'PILING'
    else:
        return cross""")[0]

    # Process: Select by Years (Select) (analysis)
    arcpy.analysis.Select(in_features=Updated_Input_Table_19_, out_feature_class=usfs_haz_fuels_treatments_standardized_20220713_2_.__str__().format(**locals(),**globals()), where_clause="Year >= 1995 And Year <= 2025")

    # Process: Calculate Geometry (Calculate Field) (management)
    Updated_Input_Table_17_ = arcpy.management.CalculateField(in_table=usfs_haz_fuels_treatments_standardized_20220713_2_.__str__().format(**locals(),**globals()), field="TRMT_GEOM", expression="'POLYGON'")[0]

    # Process: 2j Standardize Domains (2j Standardize Domains) (PC414CWIMillionAcres)
    Updated_Input_Table_26_ = StandardizeDomains(Input_Table=Updated_Input_Table_17_)[0]

    # Process: 2k Keep Fields (2k Keep Fields) (PC414CWIMillionAcres)
    Output_Table = KeepFields(Input_Table=Updated_Input_Table_26_)[0]

    # Process: 7a Enrichments Polygon (7a Enrichments Polygon) (PC414CWIMillionAcres)
    Veg_Summarized_Polygons2 = fr"{arcpy.env.scratchGDB}\Veg_Summarized_Polygons2"
    aEnrichmentsPolygon1(Veg_Summarized_Enriched_Output=Veg_Summarized_Polygons2, Input_Polygons=Output_Table)

    # Process: Copy Features (Copy Features) (management)
    arcpy.management.CopyFeatures(in_features=Veg_Summarized_Polygons2, out_feature_class=BLM_enriched_20230814.__str__().format(**locals(),**globals()))

    # Process: Calculate Treatment ID (Calculate Field) (management)
    Updated_Input_Table_4_ = arcpy.management.CalculateField(in_table=BLM_enriched_20230814.__str__().format(**locals(),**globals()), field="TRMTID_USER", expression="!PROJECTID_USER![:7]+'-'+(!COUNTY![:3])+'-'+(!PRIMARY_OWNERSHIP_GROUP![:4])+'-'+!IN_WUI![:3]+'-'+!PRIMARY_OBJECTIVE![:8]")[0]

    # Process: 2b Assign Domains (2b Assign Domains) (PC414CWIMillionAcres)
    WFR_TF_Template_2_ = AssignDomains(Input_Table=Updated_Input_Table_4_)[0]

if __name__ == '__main__':
    # Global Environment settings
    with arcpy.EnvManager(MDomain="-100000 900719825474.099", XYDomain="-16909700 -8597000 900703015774.099 900711328474.099", ZDomain="-100000 900719825474.099", 
                          extent="-454912.6877 -684967.9687 620505.8279 530489.4069 PROJCS[\"NAD_1983_California_Teale_Albers\",GEOGCS[\"GCS_North_American_1983\",DATUM[\"D_North_American_1983\",SPHEROID[\"GRS_1980\",6378137.0,298.257222101]],PRIMEM[\"Greenwich\",0.0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Albers\"],PARAMETER[\"False_Easting\",0.0],PARAMETER[\"False_Northing\",-4000000.0],PARAMETER[\"Central_Meridian\",-120.0],PARAMETER[\"Standard_Parallel_1\",34.0],PARAMETER[\"Standard_Parallel_2\",40.5],PARAMETER[\"Latitude_Of_Origin\",0.0],UNIT[\"Meter\",1.0]]", maintainAttachments=False, maintainSpatialIndex=True, 
                          outputCoordinateSystem="PROJCS[\"NAD_1983_California_Teale_Albers\",GEOGCS[\"GCS_North_American_1983\",DATUM[\"D_North_American_1983\",SPHEROID[\"GRS_1980\",6378137.0,298.257222101]],PRIMEM[\"Greenwich\",0.0],UNIT[\"Degree\",0.0174532925199433]],PROJECTION[\"Albers\"],PARAMETER[\"False_Easting\",0.0],PARAMETER[\"False_Northing\",-4000000.0],PARAMETER[\"Central_Meridian\",-120.0],PARAMETER[\"Standard_Parallel_1\",34.0],PARAMETER[\"Standard_Parallel_2\",40.5],PARAMETER[\"Latitude_Of_Origin\",0.0],UNIT[\"Meter\",1.0]]", preserveGlobalIds=True, qualifiedFieldNames=False, 
                          scratchWorkspace="C:\\Users\\sageg\\Documents\\ArcGIS\\Projects\\PC414 CWI Million Acres\\scratch.gdb", transferGDBAttributeProperties=True, workspace="C:\\Users\\sageg\\Documents\\ArcGIS\\Projects\\PC414 CWI Million Acres\\PC414 CWI Million Acres.gdb"):
        zBLM(*argv[1:])
